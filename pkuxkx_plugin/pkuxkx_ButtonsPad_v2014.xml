<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on 2014年 十一月 19日 星期三, 下午 8:27 -->
<!-- MuClient version 4.92 -->

<!-- Plugin "pkuxkx_ButtonsPad_v2014" generated by Plugin Wizard -->

<muclient>
<plugin
   name="pkuxkx_ButtonsPad_v2014"
   author="littleknife"
   id="22f3d60d077c62c3e26c72aa"
   language="Lua"
   purpose="MUSH内置集成按钮面板V1.0_for pkuxkxk v20150113"
   save_state="y"
   date_written="2015-01-13 20:27:01"
   requires="4.77"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->
<!--  Variables  -->

<variables>
  <variable name="mw_Tools_ToolBar_Window_windowx">442</variable>
  <variable name="mw_Tools_ToolBar_Window_windowy">457</variable>
  <variable name="mw_Tools_ToolBar_Window_windowmode">0</variable>
  <variable name="mw_Tools_ToolBar_Window_windowflags">2</variable>
</variables>

<!--  Script  -->


<script>
<![CDATA[
----**************************************************************************
-- File name   : pkuxkx_ButtonsPad_v2014.xml
-- Description : 此文件为集成按钮面板脚本文件。
--
-- Author: 胡小子littleknife (applehoo@126.com)
-- Version:	2015.02.02.1905
----**************************************************************************
print( "\r\n\r\npkuxkx_ButtonsPad_v2014  MUSH内置集成按钮面板(by littleknife)    加载.......OKOK!!\r\n\r\n")
local Help_str=			'说明：此模块为封装集成按钮面板。\r\n\r\n '
Help_str=Help_str..		'示例：\r\n\r\n'
Help_str=Help_str..		'local bb=ButtonClass.new()\r\n'
Help_str=Help_str..		'bb.barTitle="ToolsBar"\r\n'
Help_str=Help_str..		'bb.barCols=15\r\n'
Help_str=Help_str..		'bb.buttons_nums=20\r\n'
Help_str=Help_str..		'bb:Create()\r\n\r\n'
Help_str=Help_str..		'Author: 胡小子littleknife (applehoo@126.com) \r\n\r\n'

----**************************************************************************
local Readme_ForPlugin=[[
pkuxkx_ButtonsPad_v2014
MUSH内置集成按钮面板V1.0_for pkuxkxk v20141112

1、插件特色：
				可以任意更改插件的布局，形成水平按钮面板和垂直按钮面板。
				可以任意设置插件的按钮数量及对应的命令
				可以在插件的对应按钮位置点击右键直接编辑内容。
				可以把插件的按钮配置存贮在外链文件中。
2、使用方法：
				用正常插件的安装方式安装插件。拷贝Tools_toolBars_lib.lua文件至MUSHClient.exe目录下。
				编辑按钮的方法：
							（1）可以再游戏内插件面板（标题区和按钮上右键点击后均可编辑）直接编辑后，保存至文件即可，Tools_toolBars_lib.lua自动更新。
							（2）直接找到MUSHClient.exe目录下生成的Tools_toolBars_lib.lua文件进行修改，然后重新载入插件。
							（3）若你能看懂代码也可以直接修改本插件最后代码进行修改。
3、目前存在的遗憾：	插件版还未实现一个插件多个按钮面板的功能。（脚本模式可以做到）
				by littleknife
				2014.11.15
]]
----**************************************************************************
require "serialize"
require "movewindow"

local INPUT_TABLE_SETTINGS={
         box_width = 500,
         box_height = 150, 
         prompt_height = 20,
         reply_width = 500,
         reply_height = 20,
         max_length = 2000,}
	

ButtonClass=
	{
		new=function()
			local _bu={}
				setmetatable(_bu,{__index=ButtonClass})
			return _bu
		end,
		barName			=	"Button_Bar",
		barTitle         =   "SysBar",
		barTitle_DOC="",
		barCols=6,
		buttons_nums="",
		barType="vertical",----水平："horizontal"；垂直：vertical

        Height          =   25,		----按钮默认高度。
        Left            =  10,--- 70,		----第一个按钮的位置x。
        Top             =   34,----2,		----第一个按钮的位置y。（也是Title的高度）
        Width           =   60,		----按钮默认宽度。
		
		TitleWidth=70,		
		
		cur_HotspotID="",
		windowinfo="",

		BUTTON_TEXT_FONT			=	"宋体",
		BUTTON_TEXT_COLOUR			=	 ColourNameToRGB("black"),
		BUTTON_TEXT_PUSH_COLOUR			=	 ColourNameToRGB("green"),
		
		help=Help_str,
		simButtons_Tab={},
		Buttons_Tab={},
		backupconfig=0,
	}

----**************************************************************************

function ButtonClass:Saveconfig()
		local _OUTPUT_STRING
		self.simButtons_Tab={}
		for i=1,self.buttons_nums do
					if table_is_empty(self.Buttons_Tab[i])==true then
							self.Buttons_Tab[i]={}
					end
					if self.Buttons_Tab[i].Caption==nil or self.Buttons_Tab[i].Caption=="" then	
									self.Buttons_Tab[i].Caption="Cmd_"..i
					end
					if	self.Buttons_Tab[i].Click_CMD==nil or self.Buttons_Tab[i].Click_CMD=="" then
									self.Buttons_Tab[i].Click_CMD="cmd_"..i	
					end---if
					if	self.Buttons_Tab[i].Type==nil or self.Buttons_Tab[i].Type=="" then
									self.Buttons_Tab[i].Type=1	
					end---if					
					local _sTab={}
					_sTab.Caption=self.Buttons_Tab[i].Caption
					_sTab.Click_CMD=self.Buttons_Tab[i].Click_CMD
					_sTab.Type=self.Buttons_Tab[i].Type
					table.insert(self.simButtons_Tab,_sTab)
		end
	
	----------------------------------------------------------------------------------------------------
		SetVariable (self.barTitle.."_toolBars_INI", serialize.save ("Buttons_Tab",self.simButtons_Tab))
		BUTTONS_PAD_BUTTONS_COLS=self.barCols
		BUTTONS_PAD_BUTTONS_TYPE=self.barType
		_OUTPUT_STRING="BUTTONS_PAD_BUTTONS_COLS="..self.barCols.."\r\n"
		_OUTPUT_STRING=_OUTPUT_STRING.."----按钮的列数设置：数字。（行数自动计算）\r\n"
		_OUTPUT_STRING=_OUTPUT_STRING.."BUTTONS_PAD_BUTTONS_TYPE='"..self.barType.."'\r\n"
		_OUTPUT_STRING=_OUTPUT_STRING.."----按钮的布置方式：vertical	和	horizontal，垂直和水平；\r\n"
		
		_OUTPUT_STRING=_OUTPUT_STRING..GetVariable(self.barTitle.."_toolBars_INI")
		if self.backupconfig==1 then
				self.backupconfig=0
				local filter = { lua = "Lua files", ["*"] = "All files" }
				local filestring=self.barTitle.."_toolBars_lib_"..GetInfo(2)..".lua"
				local title="::备份配置文件::"
				local filename = utils.filepicker (title, filestring, extension, filter, true)
				if filename~=nil then
				print("::备份配置文件::>>",filename,"<<::")
									f = io.output (filename) --> handle to new file
									f:write (_OUTPUT_STRING) -- write to it
									f:close ()  -- close that file now
				end--if
		end--if
		local default_filename=GetInfo (56) .. self.barTitle.."_toolBars_lib_"..GetInfo(2)..".lua"
							f = io.output (default_filename) --> handle to new file
							f:write (_OUTPUT_STRING) -- write to it
							f:close ()  -- close that file now
		DeleteVariable(self.barTitle.."_toolBars_INI")
		----------------------------------------------------------------------------------------------------
		
end
----**************************************************************************
function ButtonClass:Loadconfig()
			----*****************************************************************************************

			----print("table_is_empty(self.Buttons_Tab)",table_is_empty(self.Buttons_Tab))
				if table_is_empty(self.Buttons_Tab)==true then
				
						if self.buttons_nums~="" and self.buttons_nums~=nil and type(self.buttons_nums)=="number" then
									self.Buttons_Tab={}
									for i=1, self.buttons_nums do
										self.Buttons_Tab[i]={}
									end---for
						else
								self.buttons_nums=table.maxn(self.Buttons_Tab)						
						end--if buttons_nums
						
				end---if
				
-----print("nums,Tabmaxn::>>",self.buttons_nums,table.maxn(self.Buttons_Tab))
		if self.buttons_nums<table.maxn(self.Buttons_Tab) then
				self.Buttons_Tab=table_intercept(self.Buttons_Tab,self.buttons_nums)
		end
		if self.barType=="horizontal"	then
							self.Left= self.TitleWidth+12	
							self.Top= 2	
		end
		if self.barType=="vertical"	then
								self.Left= 10	
								self.Top= 34	
		end--if barType		
		
			----*****************************************************************************************
			ButtonClass.barCols=self.barCols
		local curCol,curRow,row			
		for i=1,self.buttons_nums do
			if table_is_empty(self.Buttons_Tab[i])==true or self.Buttons_Tab[i].Caption==nil or  self.Buttons_Tab[i].Click_CMD==nil then				
					self.Buttons_Tab[i]={}
					self.Buttons_Tab[i].Caption="Cmd_"..i
					self.Buttons_Tab[i].Click_CMD="cmd_"..i
					self.Buttons_Tab[i].Type=1
			end
			self.Buttons_Tab[i].cmdID=self.barTitle.."_command_"..i
			---------setmetatable(self.Buttons_Tab[i],{__index=ButtonClass})
		-----------------------------------------------------------------------------------
			if self.barType=="horizontal"	then
			
					curCol=bit.mod(i,self.barCols)
					if curCol==0 then curCol=self.barCols end
					curRow=math.ceil(i/self.barCols)
			else
			
					row=math.ceil(self.buttons_nums/self.barCols)					
					curRow=bit.mod(i,row)
					if curRow==0 then curRow=row end
					curCol=math.ceil(i/row)
			end
					self.Buttons_Tab[i].Left	=self.Left+(curCol-1)*(self.Width+2)
					self.Buttons_Tab[i].Top	=self.Top+(curRow-1)*(self.Height+2)
		-----------------------------------------------------------------------------------
			
			self.Buttons_Tab[i].Width	=self.Width
			self.Buttons_Tab[i].Height	=self.Height

		end----for
		----self:Saveconfig()
		-------------------------------------------------------------------------------
end

----**************************************************************************
function ButtonClass:Draw()
----*************************************************************************

			self.barRows=math.ceil(self.buttons_nums/self.barCols)
			self.WINDOW_WIDTH = math.max((self.Left+self.barCols*(self.Width+3)),self.TitleWidth)
			self.WINDOW_HEIGHT =self.Top+self.barRows*(self.Height+3)

	WindowCreate (self.GCW,
                self.windowinfo.window_left,
                self.windowinfo.window_top,
                self.WINDOW_WIDTH,
                self.WINDOW_HEIGHT,
				self.windowinfo.window_mode,
				self.windowinfo.window_flags,
                WINDOW_BACKGROUND_COLOUR
				)

	WindowDeleteAllHotspots(self.GCW)
	----[[Frame]]-----圆角的框架Start
		WindowCircleOp (self.GCW,

				miniwin.circle_round_rectangle, -- round rectangle
                0, 0,
				self.WINDOW_WIDTH,
                self.WINDOW_HEIGHT,	 -- Left, Top, Right, Bottom
                ColourNameToRGB("#FFFFFF"), miniwin.pen_solid, 1.5,   -- pen width 2
                ColourNameToRGB("#000000"), miniwin.brush_solid,  -- brush
                8,   -- width of the ellipse used to draw the rounded corner
                8)   -- height of the ellipse used to draw the rounded corner
	----[[Frame]]-----圆角的框架End


	-- write Gleam Control stuff to top of screen.
	self:drawTitle()

	-- Write buttons to screen.
	self:drawButtons()

	-- Show the window
	WindowShow(self.GCW, true)
movewindow.save_state (self.GCW)
	------------------------------------------------------------------------------
end

function ButtonClass:drawTitle()
	-- This function draws the system title etc above the control window buttons.
	if self.barTitle~=nil then ButtonClass.barTitle=self.barTitle end
	----对象的属性直接覆盖类属性。-->解决无法全部封存为类的问题。
	-- Title font
	WindowFont (self.GCW, TITLE_FONT_ID_NORMAL, TITLE_FONT_NAME, TITLE_FONT_SIZE)
   
	header_font_height =30
    TITLE_HEIGHT = header_font_height
	title_height = TITLE_HEIGHT
	self.TitleWidth =WindowTextWidth(self.GCW, TITLE_FONT_ID_NORMAL, self.barTitle_DOC)

	if self.barType=="horizontal"	then
				title_top = (math.abs((self.WINDOW_HEIGHT-2)-title_height))/2+4
				-----print(title_top)
				title_left = LEFT_MARGIN
	else
				title_top = TOP_MARGIN
				title_left = (self.WINDOW_WIDTH - self.TitleWidth)/2
	end--if barType
	title_bottom = title_top + title_height
	title_right = title_left + self.TitleWidth

	TITLE_TEXT_COLOUR = ColourNameToRGB ("white")
	
	if self.barType=="horizontal"	then
				movewindow.add_drag_handler (self.GCW, 2 ,2, title_left+self.TitleWidth+2, self.WINDOW_HEIGHT-2)
				
				WindowGradient(self.GCW, 2 ,2, title_left+self.TitleWidth+2, self.WINDOW_HEIGHT-2, WINDOW_BACKGROUND_COLOUR, 0x444444, 2)
				WindowText(self.GCW, TITLE_FONT_ID_NORMAL, self.barTitle_DOC, title_left, title_top, title_right, title_bottom, TITLE_TEXT_COLOUR, false)
				WindowLine(self.GCW, title_left+self.TitleWidth+2, 0, title_left+self.TitleWidth+2,self.WINDOW_HEIGHT-2, 0xffffff, 256, 1)	
					
	else
				movewindow.add_drag_handler (self.GCW, 5 ,5, self.WINDOW_WIDTH-4, 30)
				WindowGradient(self.GCW, 2 ,2, self.WINDOW_WIDTH-2, 30, WINDOW_BACKGROUND_COLOUR, 0x444444, 2)
				WindowText(self.GCW, TITLE_FONT_ID_NORMAL, self.barTitle_DOC, title_left, title_top, title_right, title_bottom, TITLE_TEXT_COLOUR, false)
				WindowLine(self.GCW, 0, 30, self.WINDOW_WIDTH-2, 30, 0xffffff, 256, 1)
				
	end
end

function ButtonClass:drawButtons() -- The code below adds the tabs for each control.
	----print("::按钮个数::",table.maxn(self.Buttons_Tab) )
	for i=1, table.maxn(self.Buttons_Tab) do
	
						tab_width =self.Buttons_Tab[i].Width
						tab_height = self.Buttons_Tab[i].Height

						tab_left = self.Buttons_Tab[i].Left
						tab_top = self.Buttons_Tab[i].Top

						tab_right = tab_left + tab_width - 3
						tab_bottom = tab_top + tab_height + 1

						----按钮效果：按下和抬起>>>>>
						if string.lower(self.cur_HotspotID) == string.lower(self.Buttons_Tab[i].cmdID) then -- Active tab is pushed in

							TAB_TEXT_COLOUR =self.BUTTON_TEXT_PUSH_COLOUR

							WindowRectOp (self.GCW, miniwin.rect_draw_edge, tab_left, tab_top, tab_right, tab_bottom,
								miniwin.rect_edge_etched,
								miniwin.rect_edge_at_all+miniwin.rect_option_fill_middle)
						else -- inactive tabs are raised.

							TAB_TEXT_COLOUR = self.BUTTON_TEXT_COLOUR

							WindowRectOp (self.GCW, miniwin.rect_draw_edge, tab_left, tab_top, tab_right, tab_bottom,
								miniwin.rect_edge_raised,
								miniwin.rect_edge_at_all+miniwin.rect_option_fill_middle)
						end
						----<<<<<按钮效果：按下和抬起
	
						function _mousedown(flags,hotspot_id)
								self:MouseDown(flags,hotspot_id,i)
						end	

						win_addhotspot(self.GCW, self.Buttons_Tab[i].cmdID, tab_left, tab_top, tab_right, tab_bottom, nil, nil, _mousedown, nil,nil, self.Buttons_Tab[i].Caption, 1, 0)

						----Text Position is Center....Start
						local	Text_Left=math.ceil(math.abs(self.Buttons_Tab[i].Width-string.len(self.Buttons_Tab[i].Caption)*GetInfo(240))/2)+self.Buttons_Tab[i].Left
						local	Text_Top=math.ceil(math.abs(self.Buttons_Tab[i].Height-14)/2)+self.Buttons_Tab[i].Top
						local	Text_Right=Text_Left+string.len(self.Buttons_Tab[i].Caption)*GetInfo(240)
						local	Text_Bottom=Text_Top+self.Buttons_Tab[i].Height
						----Text Position is Center....End


						-- Buttons font

						FONT_NAME = "黑体"
						FONT_SIZE = "10"
						FONT_ID_NORMAL = "font" .. self.GCW

						WindowFont (self.GCW, FONT_ID_NORMAL, FONT_NAME, FONT_SIZE)

						WindowText(self.GCW, FONT_ID_NORMAL, self.Buttons_Tab[i].Caption, Text_Left, Text_Top, Text_Right, Text_Bottom,TAB_TEXT_COLOUR, false)
		-------------------------------------------------------------------------------------------------------
	end--------for i, self.Buttons_Tab[i] in pairs(self.Buttons_Tab) do
	
end

function ButtonClass:refresh()
	-----WindowRectOp(self.GCW, 2, 0, 0, 0, 0, WINDOW_BACKGROUND_COLOUR)----movewindow close
	self:Draw()
end

function ButtonClass:MouseDown(flags, hotspot_id,i)
	self.cur_HotspotID = hotspot_id
		self:drawButtons()
		if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
				self:Mouse_RightClick(hotspot_id,i)
				return
		end---if bit
	----print(hotspot_id,table.maxn(self.Buttons_Tab))
	for i, value in pairs(self.Buttons_Tab) do
		if value.cmdID==hotspot_id then
				if self.Buttons_Tab[i].Type==1 then
					Execute(value.Click_CMD)
				elseif self.Buttons_Tab[i].Type==2 then
					local CurLock_ID=GetPluginVariable("5708c2502be3dc52932464cd","cur_npcid")
					Execute("perform "..value.Click_CMD.." "..CurLock_ID)
				elseif self.Buttons_Tab[i].Type==3 then
					loadstring (value.Click_CMD)()
				elseif self.Buttons_Tab[i].Type==4 then
					local CurLock_ID=GetPluginVariable("5708c2502be3dc52932464cd","cur_npcid")				
					Execute(value.Click_CMD.." "..CurLock_ID)
				elseif self.Buttons_Tab[i].Type==5 then
					local CurLock_ID=GetPluginVariable("5708c2502be3dc52932464cd","cur_npcid")				
					Execute("ask "..CurLock_ID.." about "..value.Click_CMD)					
				end---if				
			break
		end
	end	
end

function ButtonClass:Mouse_RightClick(hotspot_id,i)
	local old_Caption=self.Buttons_Tab[i].Caption
	local old_Click_CMD=self.Buttons_Tab[i].Click_CMD
	local old_Type=self.Buttons_Tab[i].Type

buttontype_command_on = tonumber(GetVariable("buttontype_command_on")) or 0
buttontype_perform_on = tonumber(GetVariable("buttontype_perform_on")) or 0
buttontype_script_on = tonumber(GetVariable("buttontype_script_on")) or 0
buttontype_action_on = tonumber(GetVariable("buttontype_action_on")) or 0		
buttontype_asksomething_on = tonumber(GetVariable("buttontype_asksomething_on")) or 0
	if old_Type==1 then
						buttontype_command_on = 1
						buttontype_perform_on = 0						
						buttontype_script_on = 0
						buttontype_action_on =0
						buttontype_asksomething_on =0
	end
	if old_Type==2 then
						buttontype_command_on = 0
						buttontype_perform_on = 1						
						buttontype_script_on = 0
						buttontype_action_on =0
						buttontype_asksomething_on =0
	end
	if old_Type==3 then
						buttontype_command_on = 0
						buttontype_perform_on = 0						
						buttontype_script_on = 1
						buttontype_action_on =0
						buttontype_asksomething_on =0	
	end
	if old_Type==4 then
						buttontype_command_on = 0
						buttontype_perform_on = 0						
						buttontype_script_on = 0
						buttontype_action_on =1
						buttontype_asksomething_on =0
	end
	if old_Type==5 then
						buttontype_command_on = 0
						buttontype_perform_on = 0						
						buttontype_script_on = 0
						buttontype_action_on =0
						buttontype_asksomething_on =1
	end	
	
		SetVariable("buttontype_command_on", buttontype_command_on)
		SetVariable("buttontype_perform_on", buttontype_perform_on)	
		SetVariable("buttontype_script_on", buttontype_script_on)
		SetVariable("buttontype_action_on", buttontype_action_on)		
		SetVariable("buttontype_asksomething_on", buttontype_asksomething_on)	
		local ed_string="^"
		if GetPluginInfo ("5708c2502be3dc52932464cd", 17)	then
				ed_string=""
		end
	menustring="^::pkuxkx_Menu::|-|-|编辑【".. old_Caption.."】|-|^::按钮类型::|-|-|"..((buttontype_command_on==1 and "+") or "").."command|-|"..ed_string..((buttontype_perform_on==1 and "+") or "").."perform|-|"..((buttontype_script_on==1 and "+") or "").."script|-|"..ed_string..((buttontype_action_on==1 and "+") or "").."action|-|"..ed_string..((buttontype_asksomething_on==1 and "+") or "").."asksomething|-|-|^::by littleknife::"
	local result = WindowMenu(
	self.GCW,
	WindowInfo (self.GCW, 14),
	WindowInfo (self.GCW, 15),
	menustring)
	  ---print(result,tonumber(result))
      if result ~= "" then
			if string.find(result,"编辑") then
			button_type_list={"1.命令alias，直接执行命令。","2.Perform命令，相当于执行perform xxx LockID。","3.脚本指令，相当于执行lua脚本。","4.Action指令，相当于对LockedID做动作","5.ask 指令，输入内容即相当于ask LockID about xx。"}
						new_Caption= utils.inputbox ( "【标签编辑】输入：", "按钮编辑", old_Caption, nil, nil,INPUT_TABLE_SETTINGS)
						new_Click_CMD= utils.inputbox ( "【命令编辑】输入：", "按钮编辑", old_Click_CMD, nil, nil,INPUT_TABLE_SETTINGS)
						new_Type= utils.listbox ("【按钮类型】输入：", "按钮编辑",button_type_list)
						if new_Type==nil then 
							print("选择默认选项：按钮类型：命令alias。")
							self.Buttons_Tab[i].Type=1
						else
							self.Buttons_Tab[i].Type=new_Type	
						end
						
						if new_Caption==nil or new_Caption==""	then
							new_Caption=old_Caption
						end---if
						if new_Click_CMD==nil or new_Click_CMD=="" then ----欲修改本按钮.
							new_Click_CMD=old_Click_CMD
						end---if
						self.Buttons_Tab[i].Caption=new_Caption
						self.Buttons_Tab[i].Click_CMD=new_Click_CMD
				self:Saveconfig()
				self:refresh()
				print("Edit Button......OK!!")
				SetCommandSelection (1, -1)
				return
			end
			if result=="command" then
					if buttontype_command_on == 0 then
						buttontype_command_on = 1
						buttontype_perform_on = 0						
						buttontype_script_on = 0
						buttontype_action_on =0
						buttontype_asksomething_on =0						
							self.Buttons_Tab[i].Type=1							
								ColourNote ("yellow", "", self.Buttons_Tab[i].Caption.." 按钮类型设置为：Command")
					end
			end
			if result=="perform" then
					if buttontype_perform_on == 0 then
						buttontype_command_on = 0
						buttontype_perform_on = 1						
						buttontype_script_on =0 
						buttontype_action_on =0
						buttontype_asksomething_on =0						
							self.Buttons_Tab[i].Type=2
							
								ColourNote ("yellow", "", self.Buttons_Tab[i].Caption.." 按钮类型设置为：perform")
					end
			end
			if result=="script" then
					if buttontype_script_on == 0 then
						buttontype_command_on = 0
						buttontype_perform_on = 0						
						buttontype_script_on = 1
						buttontype_action_on =0
						buttontype_asksomething_on =0
							self.Buttons_Tab[i].Type=3
							
								ColourNote ("yellow", "", self.Buttons_Tab[i].Caption.." 按钮类型设置为：script")
					end
			end
			if result=="action" then
					if buttontype_action_on == 0 then
						buttontype_command_on = 0
						buttontype_perform_on = 0						
						buttontype_script_on = 0
						buttontype_action_on =1
						buttontype_asksomething_on =0
							self.Buttons_Tab[i].Type=4
							
								ColourNote ("yellow", "", self.Buttons_Tab[i].Caption.." 按钮类型设置为：action")
					end
			end
			if result=="asksomething" then
					if buttontype_asksomething_on == 0 then
						buttontype_command_on = 0
						buttontype_perform_on = 0						
						buttontype_script_on = 0
						buttontype_action_on =0
						buttontype_asksomething_on =1
							self.Buttons_Tab[i].Type=5
							
								ColourNote ("yellow", "", self.Buttons_Tab[i].Caption.." 按钮类型设置为：asksomething")
					end
			end
		SetVariable("buttontype_command_on", buttontype_command_on)			
		SetVariable("buttontype_perform_on", buttontype_perform_on)			
		SetVariable("buttontype_script_on", buttontype_script_on)
		SetVariable("buttontype_action_on", buttontype_action_on)
		SetVariable("buttontype_asksomething_on", buttontype_asksomething_on)		
	   end---if 
  end

function ButtonClass:title_MouseUp(flags, hotspot_id)
-----print("self.windowinfo.window_flags",flags,self.windowinfo.window_flags,miniwin.hotspot_got_rh_mouse)
	if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
		self:title_Mouse_RightClick(hotspot_id)
	end
end

function ButtonClass:title_Mouse_RightClick(hotspot_id)
	local MenuDOC
	if self.barType=="horizontal"	then 
			MenuDOC="垂直布置"
	else
			MenuDOC="水平布置"
	end
	local result = WindowMenu(self.GCW,WindowInfo (self.GCW, 14),WindowInfo (self.GCW, 15),"^::pkuxkx_Menu::|-|-|载入配置文件|-|保存配置文件|-|另存（备份）配置文件|-|-|"..MenuDOC.."|-|-|面板设置|-|-|隐藏面板|-|-|^by littleknife|")
	   ---print(result)
      if result ~= "" then
			if string.find(result,"隐藏") then
				--print("hide")
				WindowShow(self.GCW,false)
			return
			end
			if string.find(result,"载入") then
			
				local filter = { lua = "Lua files", ["*"] = "All files" }
				local filestring=self.barTitle.."_toolBars_lib_"..GetInfo(2)..".lua"
				local title="::载入配置文件::"
				local filename = utils.filepicker (title, filestring, extension, filter, false)
				
				if filename~=nil then				
				dofile (filename)
				print("::载入配置文件::>>",filename," Okey!!<<::")
				self.Buttons_Tab=Buttons_Tab
				self:Saveconfig()
				self:Loadconfig()
				self:refresh()
				utils.msgbox ( "【载入】已载入按钮配置文件！", "Load Config File")
				end--if
			return
			end
			if string.find(result,"保存") then
				self:Saveconfig()
				self:Loadconfig()
				self:refresh()
				utils.msgbox ( "【保存】已将按钮配置文件保存！", "Save Config File")
			return
			end
			if string.find(result,"另存") then
				self.backupconfig=1
				self:Saveconfig()
				self:Loadconfig()
				self:refresh()
				utils.msgbox ( "【备份】已将按钮配置文件备份！", "SaveAs Config File")
			return
			end
			if string.find(result,"水平") then
				self.barType="horizontal"
				BUTTONS_PAD_BUTTONS_TYPE=self.barType
				local bar_cols= utils.inputbox ( "【列数设置】输入：", "按钮编辑",self.barCols, nil, nil,INPUT_TABLE_SETTINGS)
				if bar_cols~="" and bar_cols~=nil then
				
							self.barCols=bar_cols
							BUTTONS_PAD_BUTTONS_COLS=self.barCols
							self:Loadconfig()
							self:refresh()
				end
				return
			end
			if string.find(result,"垂直") then
				self.barType="vertical"
				local bar_cols= utils.inputbox ( "【列数设置】输入：", "按钮编辑",self.barCols, nil, nil,INPUT_TABLE_SETTINGS)
				if bar_cols~="" and bar_cols~=nil then
							self.barCols=bar_cols
							BUTTONS_PAD_BUTTONS_COLS=self.barCols
							self:Loadconfig()
							self:refresh()
				end
				return
			end
			if string.find(result,"设置") then
				local bar_nums= utils.inputbox ( "【按钮数设置】输入：", "按钮编辑",self.buttons_nums, nil, nil,INPUT_TABLE_SETTINGS)
				local bar_cols= utils.inputbox ( "【列数设置】输入：", "按钮编辑",self.barCols, nil, nil,INPUT_TABLE_SETTINGS)
				local _dirlist={"水平布置（标题在左侧）","垂直布置（标题在上侧）"}
				local bar_type_IDX= utils.listbox ("【选择布置方向（水平、垂直）】", "：面板布置：",_dirlist)
				
				if bar_nums~="" and bar_nums~=nil then
						if tonumber(bar_nums)<self.buttons_nums then self.Buttons_Tab=table_intercept(self.Buttons_Tab,bar_nums)	end
							self.buttons_nums=tonumber(bar_nums)
				end
				if bar_cols~="" and bar_cols~=nil then
							self.barCols=bar_cols
				end
				if	bar_type_IDX~="" and bar_type_IDX~=nil then
							if bar_type_IDX==1 then self.barType="horizontal"	end
							if bar_type_IDX==2	then self.barType="vertical"	end							
				end
							self:Saveconfig()
							self:Loadconfig()
							self:refresh()
				return
			end			
		self:refresh()
	   end
  end

function ButtonClass:Close()
	WindowDelete(self.GCW)
	print("Close "..self.GCW.."......OK!!")
end

----*****************************************************************************************
-- Execute on loadup.

function ButtonClass:Create(ButtonNums)
			-- colours
			WINDOW_BACKGROUND_COLOUR = ColourNameToRGB ("black")
			WINDOW_TEXT_COLOUR = ColourNameToRGB ("black")
			WINDOW_BORDER_COLOUR = ColourNameToRGB ("#E8E8E8")
----*****************************************************************************************
					self.cur_HotspotID = "Command1"
					self.GCW = self.barTitle.."_ToolBar_Window"..GetPluginID() -- self.GCW = Gleam Control Window ID
					ButtonClass.GCW=self.GCW
					if ButtonNums~=nil and ButtonNums~="" and type(ButtonNums)=="number"	then
									self.buttons_nums=math.max(tonumber(ButtonNums),table.maxn(self.Buttons_Tab))
					else
									self.buttons_nums=table.maxn(self.Buttons_Tab)
					end

			----*****************************************************************************************
					self:Loadconfig()
			----*****************************************************************************************
----*****************************************************************************************
			BUTTON_FONT_HEIGHT=self.Height

			----title text
			TITLE_FONT_NAME = "微软雅黑"
			TITLE_FONT_SIZE = "10"
			TITLE_FONT_ID_NORMAL = "Font_Title" .. self.GCW

			self.barTitle_DOC = "::"..self["barTitle"].."::"
			self.TitleWidth =WindowTextWidth(self.GCW, TITLE_FONT_ID_NORMAL, self.barTitle_DOC)
			
			self.barRows=math.ceil(self.buttons_nums/self.barCols)
			self.WINDOW_WIDTH = math.max((self.Left+self.barCols*(self.Width+3)),self.TitleWidth)
			self.WINDOW_HEIGHT =self.Top+self.barRows*(self.Height+3)

			
			RIGHT_MARGIN = 5
			LEFT_MARGIN=5
			TOP_MARGIN = 5
			BOTTOM_MARGIN = 5
			WINDOW_POSITION = 9 ----center left-right at bottom
----*****************************************************************************************
				local _mw_mouseup=function(flags,hotspot_id) self:title_MouseUp(flags,hotspot_id) end

				self.windowinfo = movewindow.install (self.GCW, WINDOW_POSITION, 0,false,nil,{mouseup=_mw_mouseup})			
----*****************************************************************************************
	WindowCreate (self.GCW,
                self.windowinfo.window_left,
                self.windowinfo.window_top,
                self.WINDOW_WIDTH,
                self.WINDOW_HEIGHT,
				self.windowinfo.window_mode,
				self.windowinfo.window_flags,
                WINDOW_BACKGROUND_COLOUR
				)
					-- Show the window
	WindowShow(self.GCW, true)
					self:Draw()
end
-----
------ End window control module stuff.
---------------------------------------------------------------------------------
win_addhotspot=function(win_id, hotspot_id, left, top, right, bottom, mouseover,cancelmouseover, mousedown, cancelmousedown,mouseup,TooltipText,Cursor,flags)
		
		local MouseOver_fun= mouseover
		local CancelMouseOver_fun=cancelmouseover
		local MouseDown_fun=mousedown
		local CancelMouseDown_fun=cancelmousedown
		local MouseUp_fun=mouseup
		
		if type(mouseover)=="function"	then
				MouseOver_fun = "mouseover_" .. GetUniqueNumber ()
				_G [MouseOver_fun] = mouseover
		end
		if type(cancelmouseover)=="function"	then
				CancelMouseOver_fun = "mouseover_" .. GetUniqueNumber ()
				_G [CancelMouseOver_fun] = cancelmouseover
		end
		if type(mouseup)=="function"	then
				MouseUp_fun = "mouseover_" .. GetUniqueNumber ()
				_G [MouseUp_fun] = mouseup
		end
		if type(mousedown)=="function"	then
				MouseDown_fun = "mouseover_" .. GetUniqueNumber ()
				_G [MouseDown_fun] = mousedown
		end
		if type(cancelmousedown)=="function"	then
				CancelMouseDown_fun = "mouseover_" .. GetUniqueNumber ()
				_G [CancelMouseDown_fun] = cancelmousedown
		end	
		
------WindowAddHotspot(BSTR WindowName, BSTR HotspotId, long Left, long Top, long Right, long Bottom, BSTR MouseOver, BSTR CancelMouseOver, BSTR MouseDown, BSTR CancelMouseDown, BSTR MouseUp, BSTR TooltipText, long Cursor, long Flags);

----print("MouseDown_fun",MouseDown_fun)
		WindowAddHotspot(win_id, hotspot_id, left, top, right, bottom, MouseOver_fun, CancelMouseOver_fun, MouseDown_fun, CancelMouseDown_fun, MouseUp_fun,TooltipText,Cursor,flags)
		
end

function table_is_empty(t)
	----table is nothing,then it return true,or return false.
	if t==nil or t=="" then return true end----t=nil 即为空

        return _G.next( t ) == nil

end

function	table_intercept(t,n)
		----截取表格t内的前n项
		if type(t)~="table" then 
				return nil
		end
		
		local tmp={}
		for i=1,n do
				table.insert(tmp,t[i])
		end--for
		return tmp
end
----
---*********************************************************************----
---以下部分为插件版专门外链库增加的代码。
---*********************************************************************----
local ButtonsPad=ButtonClass.new()
ButtonsPad.barTitle="Tools"
fo = io.open (GetInfo (56) .. ButtonsPad.barTitle.."_toolBars_lib_"..GetInfo(2)..".lua")
if fo~=nil then
			require(ButtonsPad.barTitle.."_toolBars_lib_"..GetInfo(2))
			ButtonsPad.Buttons_Tab=Buttons_Tab
			fo:close ()
end
if BUTTONS_PAD_BUTTONS_COLS==nil or BUTTONS_PAD_BUTTONS_COLS=="" then
ButtonsPad.barCols=1
end
if BUTTONS_PAD_BUTTONS_TYPE~="vertical" and BUTTONS_PAD_BUTTONS_TYPE~="horizontal" then
ButtonsPad.barType="vertical"
end
--------默认竖向，1列，共5个按钮。--->>>
ButtonsPad.barType=BUTTONS_PAD_BUTTONS_TYPE
ButtonsPad.barCols=BUTTONS_PAD_BUTTONS_COLS
ButtonsPad:Create()
-------------------默认竖向，1列，共5个按钮。-----<<<
---*********************************************************************----
---*********************************************************************----
]]>
</script>


</muclient>
